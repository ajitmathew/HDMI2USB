C51 COMPILER V7.07   VIRTUAL                                                               02/17/2013 16:57:05 PAGE 1   


C51 COMPILER V7.07, COMPILATION OF MODULE VIRTUAL
OBJECT MODULE PLACED IN Virtual.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Virtual.c BROWSE INCDIR(C:\Documents and Settings\prku\Desktop\UART Debug\)
                    - DEBUG OBJECTEXTEND

stmt level    source

   1          #pragma NOIV               // Do not generate interrupt vectors
   2          //-----------------------------------------------------------------------------
   3          //   File:      bulkloop.c
   4          //   Contents:   Hooks required to implement USB peripheral function.
   5          //
   6          //   Copyright (c) 2000 Cypress Semiconductor All rights reserved
   7          //-----------------------------------------------------------------------------
   8          #include "fx2.h"
   9          #include "fx2regs.h"
  10          #include "fx2sdly.h"                    // SYNCDELAY macro
  11          extern BOOL   GotSUD;         // Received setup data flag
  12          extern BOOL   Sleep;
  13          extern BOOL   Rwuen;
  14          extern BOOL   Selfpwr;
  15          
  16          extern BYTE xdata LineCode[7] ;
  17          
  18          BYTE   Configuration;      // Current configuration
  19          BYTE   AlternateSetting;   // Alternate settings
  20          
  21          void display_product(void);
  22          void TD_Poll(void);
  23          
  24          
  25          //-----------------------------------------------------------------------------
  26          // Task Dispatcher hooks
  27          //   The following hooks are called by the task dispatcher.
  28          //-----------------------------------------------------------------------------
  29          BOOL DR_SetConfiguration();
  30          
  31             
  32             // BYTE TxByte0,RxByte0;
  33             // BYTE TxByte1,RxByte1;
  34          
  35           
  36          // BYTE  ReadByteS0 (void)   // Copy the recieved Byte from SBUF to the variable RxByte0
  37          // {
  38              
  39                   // RI = 0;           // with reg320 syntax but same address
  40          
  41                   // RxByte0 = SBUF0;   //RxByte;
  42          
  43                   // return RxByte0;
  44          
  45          // }
  46          
  47          // void WriteByteS0(char ch)  // Send the data recieved from USB through SBUF0
  48          // {   
  49                  
  50                  // while (TI == 0) ;
  51                  // TI = 0 ;
  52                  // SBUF0 = ch ;
  53                  
  54          // }
C51 COMPILER V7.07   VIRTUAL                                                               02/17/2013 16:57:05 PAGE 2   

  55          
  56          
  57          // void  Serial0Init () // serial UART 0 with Timer 2 in mode 1 or high speed baud rate generator
  58          // {
  59                          
  60                      // UART230 &= 0x03;
  61          
  62                          // if ((LineCode[0] == 0x60) && (LineCode[1] == 0x09 ))   // 2400
  63          
  64                          // {
  65                          // SCON0  = 0x5A;                   //  Set Serial Mode = 1, Recieve enable bit = 1
  66                                  // T2CON  = 0x34;                   //  Int1 is detected on falling edge, Enable Timer0, Set Timer overflow Flag
  67                                  // RCAP2H = 0xFD;               //  Set TH2 value for timer2 
  68                                  // RCAP2L = 0x90;               //      baud rate is set to 2400 baud
  69                                  // TH2    = RCAP2H;             //  Upper 8 bit of 16 bit counter to FF
  70                                  // TL2    = RCAP2L;             //  value of the lower 8 bits of timer set to baud rate
  71          
  72                          // }
  73             // else if ((LineCode[0] == 0xC0) && (LineCode[1] == 0x12 ))   // 4800
  74          
  75                          // {
  76                          // SCON0  = 0x5A;                   //  Set Serial Mode = 1, Recieve enable bit = 1
  77                                  // T2CON  = 0x34;                   //  Int1 is detected on falling edge, Enable Timer0, Set Timer overflow Flag
  78                                  // RCAP2H = 0xFE;               //  Set TH2 value for timer2 
  79                                  // RCAP2L = 0xC8;               //      baud rate is set to 4800 baud
  80                                  // TH2    = RCAP2H;             //  Upper 8 bit of 16 bit counter to FF
  81                                  // TL2    = RCAP2L;             //  value of the lower 8 bits of timer set to baud rate
  82          
  83                          // }
  84                          // else if ((LineCode[0] == 0x80) && (LineCode[1] == 0x25 ))      // 9600
  85          
  86                          // {
  87                          // SCON0  = 0x5A;                   //  Set Serial Mode = 1, Recieve enable bit = 1
  88                                  // T2CON  = 0x34;                   //  Int1 is detected on falling edge, Enable Timer0, Set Timer overflow Flag
  89                                  // RCAP2H = 0xFF;               //  Set TH2 value for timer2 
  90                                  // RCAP2L = 0x64;               //      baud rate is set to 9600 baud
  91                                  // TH2    = RCAP2H;             //  Upper 8 bit of 16 bit counter to FF
  92                                  // TL2    = RCAP2L;             //  value of the lower 8 bits of timer set to baud rate
  93          
  94                          // }
  95                          // else if ((LineCode[0] == 0x00) && (LineCode[1] == 0x4B ))      // 19200
  96          
  97                          // {
  98                          // SCON0  = 0x5A;                   //  Set Serial Mode = 1, Recieve enable bit = 1
  99                                  // T2CON  = 0x34;                   //  Int1 is detected on falling edge, Enable Timer0, Set Timer overflow Flag
 100                                  // RCAP2H = 0xFF;               //  Set TH2 value for timer2 
 101                                  // RCAP2L = 0xB2;               //      baud rate is set to 19200 baud
 102                                  // TH2    = RCAP2H;             //  Upper 8 bit of 16 bit counter to FF
 103                                  // TL2    = RCAP2L;             //  value of the lower 8 bits of timer set to baud rate
 104          
 105                          // }
 106                          // else if ((LineCode[0] == 0x80) && (LineCode[1] == 0x70 ))      // 28800
 107          
 108                          // {
 109                          // SCON0  = 0x5A;                   //  Set Serial Mode = 1, Recieve enable bit = 1
 110                                  // T2CON  = 0x34;                   //  Int1 is detected on falling edge, Enable Timer0, Set Timer overflow Flag
 111                                  // RCAP2H = 0xFF;               //  Set TH2 value for timer2 
 112                                  // RCAP2L = 0xCC;               //      baud rate is set to 28800 baud
 113                                  // TH2    = RCAP2H;             //  Upper 8 bit of 16 bit counter to FF
 114                                  // TL2    = RCAP2L;             //  value of the lower 8 bits of timer set to baud rate
 115          
 116                          // }
C51 COMPILER V7.07   VIRTUAL                                                               02/17/2013 16:57:05 PAGE 3   

 117                          // else if ((LineCode[0] == 0x00) && (LineCode[1] == 0x96 ))      // 38400
 118          
 119                          // {
 120                          // SCON0  = 0x5A;                   //  Set Serial Mode = 1, Recieve enable bit = 1
 121                                  // T2CON  = 0x34;                   //  Int1 is detected on falling edge, Enable Timer0, Set Timer overflow Flag
 122                                  // RCAP2H = 0xFF;               //  Set TH2 value for timer2 
 123                                  // RCAP2L = 0xD9;               //      baud rate is set to 38400 baud
 124                                  // TH2    = RCAP2H;             //  Upper 8 bit of 16 bit counter to FF
 125                                  // TL2    = RCAP2L;             //  value of the lower 8 bits of timer set to baud rate
 126          
 127                          // }
 128                          // else if ((LineCode[0] == 0x00) && (LineCode[1] == 0xE1 ))      // 57600
 129          
 130                          // {
 131                          // SCON0  = 0x5A;                   //  Set Serial Mode = 1, Recieve enable bit = 1
 132                                  // T2CON  = 0x34;                   //  Int1 is detected on falling edge, Enable Timer0, Set Timer overflow Flag
 133                                  // RCAP2H = 0xFF;               //  Set TH2 value for timer2 
 134                                  // RCAP2L = 0xE6;               //      baud rate is set to 57600 baud
 135                                  // TH2    = RCAP2H;             //  Upper 8 bit of 16 bit counter to FF
 136                                  // TL2    = RCAP2L;             //  value of the lower 8 bits of timer set to baud rate
 137          
 138                          // }
 139                  
 140                 // else if ((LineCode[0] == 0x00) && (LineCode[1] == 0x84 ))       // 230400 
 141                          // {
 142                               // PCON |= 0X80;
 143                      // UART230 |= 0x03;
 144                              
 145                          // }
 146                                  // else //if ((LineCode[0] == 0x21) && (LineCode[1] == 0x20 ))    // 115200 (LineCode[0] == 0x00) && (Li
             -neCode[1] == 0xC2 ))
 147          
 148                          // {
 149          
 150                             // SCON0  = 0x5A;                //  Set Serial Mode = 1, Recieve enable bit = 1
 151                                  // T2CON  = 0x34;       
 152                             // RCAP2L = 0xF3; 
 153                     // RCAP2H = 0xFF; 
 154                             // TH2    = RCAP2H;          //  Upper 8 bit of 16 bit counter to FF
 155                                  // TL2    = RCAP2L;             //  value of the lower 8 bits of timer set to baud rate*/
 156          
 157          
 158                              
 159                          // }
 160                 
 161          
 162          // }
 163          
 164          
 165          
 166          
 167          void TD_Init(void)             // Called once at startup
 168          {
 169   1         
 170   1         //==========================================================
 171   1      
 172   1      EP2CFG = 0xA2;                //out 512 bytes, 2x, bulk
 173   1      SYNCDELAY; 
 174   1      //EP6CFG = 0xE2;                // in 512 bytes, 2x, bulk
 175   1      EP6CFG = 0xD2;                // in 512 bytes, 2x, iso 1101  
 176   1      SYNCDELAY;         
 177   1      EP4CFG = 0xE2;                // in 512 bytes, 2x, bulk
C51 COMPILER V7.07   VIRTUAL                                                               02/17/2013 16:57:05 PAGE 4   

 178   1      SYNCDELAY;                     
 179   1      EP8CFG = 0x02;                //clear valid bit
 180   1      SYNCDELAY;   
 181   1      
 182   1      IFCONFIG = 0xE3; //1110 0011 
 183   1      SYNCDELAY;
 184   1      
 185   1      FIFOPINPOLAR = 0x00;
 186   1      SYNCDELAY;
 187   1      PINFLAGSAB = 0x00;                      // FLAGA - EP6FF
 188   1      SYNCDELAY;
 189   1      PINFLAGSCD = 0x00;                      // FLAGD - EP2EF
 190   1      SYNCDELAY;
 191   1      PORTACFG |= 0x80; // port A configuration reg
 192   1      SYNCDELAY;
 193   1      
 194   1      SYNCDELAY;
 195   1      FIFORESET = 0x80;             // activate NAK-ALL to avoid race conditions
 196   1      SYNCDELAY;                    // see TRM section 15.14
 197   1      FIFORESET = 0x02;             // reset, FIFO 2
 198   1      SYNCDELAY;                    // 
 199   1      FIFORESET = 0x04;             // reset, FIFO 4
 200   1      SYNCDELAY;                    // 
 201   1      FIFORESET = 0x06;             // reset, FIFO 6
 202   1      SYNCDELAY;                    // 
 203   1      FIFORESET = 0x08;             // reset, FIFO 8
 204   1      SYNCDELAY;                    // 
 205   1      FIFORESET = 0x00;             // deactivate NAK-ALL
 206   1      
 207   1      SYNCDELAY;                    // 
 208   1      EP2FIFOCFG = 0x10;            // AUTOOUT=1, WORDWIDE=0
 209   1      SYNCDELAY;                    // 
 210   1      EP4FIFOCFG = 0x0C;            // AUTOIN=1, ZEROLENIN=1, WORDWIDE=0
 211   1      SYNCDELAY;  
 212   1      //  EP6FIFOCFG = 0x4C;            //INFM1=1 AUTOIN=1, ZEROLENIN=1, WORDWIDE=0
 213   1      EP6FIFOCFG = 0x0C;            // AUTOIN=1, ZEROLENIN=1, WORDWIDE=0
 214   1      SYNCDELAY;
 215   1      EP8FIFOCFG = 0x00; // disabled
 216   1      SYNCDELAY;
 217   1      
 218   1      
 219   1      EP2AUTOINLENH = 0x02; // EZ-USB automatically commits data in 512-byte chunks
 220   1      SYNCDELAY;
 221   1      EP2AUTOINLENL = 0x00;
 222   1      SYNCDELAY;
 223   1      EP4AUTOINLENH = 0x02; // EZ-USB automatically commits data in 512-byte chunks
 224   1      SYNCDELAY;
 225   1      EP4AUTOINLENL = 0x00;
 226   1      SYNCDELAY;
 227   1      EP6AUTOINLENH = 0x02; // EZ-USB automatically commits data in 512-byte chunks
 228   1      SYNCDELAY;
 229   1      EP6AUTOINLENL = 0x00;
 230   1      SYNCDELAY;
 231   1      
 232   1              
 233   1      //==============================================================================
 234   1      // PORTACFG = 0x00; // 
 235   1      // SYNCDELAY;
 236   1      // PA.3 UVC(not FIFO)   M8
 237   1      //      WAKEUPCS &= 0xFD;
 238   1      //      OEA |= 0x08;
 239   1      // IOA = IOA & 0x0F7; //1111 0111
C51 COMPILER V7.07   VIRTUAL                                                               02/17/2013 16:57:05 PAGE 5   

 240   1      //      IOA |= 0x08; //1111 0111
 241   1      
 242   1      
 243   1      // OED = 0xFF;
 244   1      // IOD = 0xFF; 
 245   1      //==========================================================   
 246   1      
 247   1      
 248   1      }
 249          
 250          void TD_Poll(void)             // Called repeatedly while the device is idle
 251          {
 252   1        
 253   1        // Serial State Notification that has to be sent periodically to the host
 254   1      
 255   1        if (!(EP1INCS & 0x02))      // check if EP1IN is available
 256   1        {
 257   2          EP1INBUF[0] = 0x0A;       // if it is available, then fill the first 10 bytes of the buffer with 
 258   2              EP1INBUF[1] = 0x20;       // appropriate data. 
 259   2              EP1INBUF[2] = 0x00;
 260   2              EP1INBUF[3] = 0x00;
 261   2              EP1INBUF[4] = 0x00;
 262   2              EP1INBUF[5] = 0x00;
 263   2              EP1INBUF[6] = 0x00;
 264   2              EP1INBUF[7] = 0x02;
 265   2          EP1INBUF[8] = 0x00;
 266   2              EP1INBUF[9] = 0x00;
 267   2              EP1INBC = 10;            // manually commit once the buffer is filled
 268   2        }
 269   1      
 270   1      //// recieving the data from the USB Host and send it out through UART
 271   1      
 272   1        // if (!(EP1OUTCS & 0x02)) // Check if EP1OUT is available
 273   1      
 274   1        // { 
 275   1              // int bcl,i;
 276   1              // bcl=EP1OUTBC;
 277   1              // for(i=0;i<bcl;i++)
 278   1              // WriteByteS0(EP1OUTBUF[i]);
 279   1              // EP1OUTBC = 0x04;
 280   1        // }
 281   1      
 282   1      //// recieve the data from UART and send it out to the USB Host
 283   1      
 284   1        // if((EP2468STAT & bmEP8EMPTY))   // check if EP8 is empty
 285   1        // { 
 286   1         
 287   1               // if (RI)
 288   1               // {
 289   1                       // EP8FIFOBUF [0] = ReadByteS0();
 290   1                       // EP8BCH = 0;    
 291   1                       // SYNCDELAY;   
 292   1                       // EP8BCL = 1; 
 293   1                       // SYNCDELAY;   
 294   1          
 295   1               // }
 296   1        
 297   1        // }
 298   1      
 299   1      }
 300          
 301          BOOL TD_Suspend(void)          // Called before the device goes into suspend mode
C51 COMPILER V7.07   VIRTUAL                                                               02/17/2013 16:57:05 PAGE 6   

 302          {
 303   1         return(TRUE);
 304   1      }
 305          
 306          BOOL TD_Resume(void)          // Called after the device resumes
 307          {
 308   1         return(TRUE);
 309   1      }
 310          
 311          //-----------------------------------------------------------------------------
 312          // Device Request hooks
 313          //   The following hooks are called by the end point 0 device request parser.
 314          //-----------------------------------------------------------------------------
 315          
 316          BOOL DR_GetDescriptor(void)
 317          {
 318   1         return(TRUE);
 319   1      }
 320          
 321          BOOL DR_SetConfiguration(void)   // Called when a Set Configuration command is received
 322          {  
 323   1      
 324   1         Configuration = SETUPDAT[2];
 325   1         return(TRUE);            // Handled by user code
 326   1      }
 327          
 328          BOOL DR_GetConfiguration(void)   // Called when a Get Configuration command is received
 329          {
 330   1         EP0BUF[0] = Configuration;
 331   1         EP0BCH = 0;
 332   1         EP0BCL = 1;
 333   1         return(TRUE);            // Handled by user code
 334   1      }
 335          
 336          BOOL DR_SetInterface(void)       // Called when a Set Interface command is received
 337          {
 338   1         AlternateSetting = SETUPDAT[2];
 339   1                      // if (AlternateSetting == 1)
 340   1                              // IOA = 0xFF;
 341   1                      // else 
 342   1                              // IOA = 0x00;
 343   1         
 344   1         return(TRUE);            // Handled by user code
 345   1      }
 346          
 347          BOOL DR_GetInterface(void)       // Called when a Set Interface command is received
 348          {
 349   1         EP0BUF[0] = AlternateSetting;
 350   1         EP0BCH = 0;
 351   1         EP0BCL = 1;
 352   1         return(TRUE);            // Handled by user code
 353   1      }
 354          
 355          BOOL DR_GetStatus(void)
 356          {
 357   1         return(TRUE);
 358   1      }
 359          
 360          BOOL DR_ClearFeature(void)
 361          {
 362   1         return(TRUE);
 363   1      }
C51 COMPILER V7.07   VIRTUAL                                                               02/17/2013 16:57:05 PAGE 7   

 364          
 365          BOOL DR_SetFeature(void)
 366          {
 367   1         return(TRUE);
 368   1      }
 369          
 370          BOOL DR_VendorCmnd(void)
 371          {
 372   1         return(TRUE);
 373   1      }
 374          
 375          //-----------------------------------------------------------------------------
 376          // USB Interrupt Handlers
 377          //   The following functions are called by the USB interrupt jump table.
 378          //-----------------------------------------------------------------------------
 379          
 380          // Setup Data Available Interrupt Handler
 381          
 382          
 383          void ISR_Sudav(void) interrupt 0
 384          {
 385   1         
 386   1         GotSUD = TRUE;            // Set flag
 387   1         EZUSB_IRQ_CLEAR();
 388   1         USBIRQ = bmSUDAV;         // Clear SUDAV IRQ
 389   1      }
 390          
 391          // Setup Token Interrupt Handler
 392          void ISR_Sutok(void) interrupt 0
 393          {
 394   1         EZUSB_IRQ_CLEAR();
 395   1         USBIRQ = bmSUTOK;         // Clear SUTOK IRQ
 396   1      }
 397          
 398          void ISR_Sof(void) interrupt 0
 399          {
 400   1         EZUSB_IRQ_CLEAR();
 401   1         USBIRQ = bmSOF;            // Clear SOF IRQ
 402   1      }
 403          
 404          void ISR_Ures(void) interrupt 0
 405          {
 406   1         if (EZUSB_HIGHSPEED())
 407   1         {
 408   2            pConfigDscr = pHighSpeedConfigDscr;
 409   2            pOtherConfigDscr = pFullSpeedConfigDscr;
 410   2         }
 411   1         else
 412   1         {
 413   2            pConfigDscr = pFullSpeedConfigDscr;
 414   2            pOtherConfigDscr = pHighSpeedConfigDscr;
 415   2         }
 416   1         
 417   1         EZUSB_IRQ_CLEAR();
 418   1         USBIRQ = bmURES;         // Clear URES IRQ
 419   1      }
 420          
 421          void ISR_Susp(void) interrupt 0
 422          {
 423   1          Sleep = TRUE;
 424   1         EZUSB_IRQ_CLEAR();
 425   1         USBIRQ = bmSUSP;
C51 COMPILER V7.07   VIRTUAL                                                               02/17/2013 16:57:05 PAGE 8   

 426   1        
 427   1      }
 428          
 429          void ISR_Highspeed(void) interrupt 0
 430          {
 431   1         if (EZUSB_HIGHSPEED())
 432   1         {
 433   2            pConfigDscr = pHighSpeedConfigDscr;
 434   2            pOtherConfigDscr = pFullSpeedConfigDscr;
 435   2         }
 436   1         else
 437   1         {
 438   2            pConfigDscr = pFullSpeedConfigDscr;
 439   2            pOtherConfigDscr = pHighSpeedConfigDscr;
 440   2         }
 441   1      
 442   1         EZUSB_IRQ_CLEAR();
 443   1         USBIRQ = bmHSGRANT;
 444   1      }
 445          void ISR_Ep0ack(void) interrupt 0
 446          {
 447   1      }
 448          void ISR_Stub(void) interrupt 0
 449          {
 450   1      }
 451          void ISR_Ep0in(void) interrupt 0
 452          {
 453   1      }
 454          void ISR_Ep0out(void) interrupt 0
 455          {
 456   1      }
 457          void ISR_Ep1in(void) interrupt 0
 458          {
 459   1      }
 460          void ISR_Ep1out(void) interrupt 0
 461          {
 462   1      }
 463          void ISR_Ep2inout(void) interrupt 0
 464          {
 465   1      }
 466          void ISR_Ep4inout(void) interrupt 0
 467          {
 468   1      
 469   1      }
 470          void ISR_Ep6inout(void) interrupt 0
 471          {
 472   1      }
 473          void ISR_Ep8inout(void) interrupt 0
 474          {
 475   1      }
 476          void ISR_Ibn(void) interrupt 0
 477          {
 478   1      }
 479          void ISR_Ep0pingnak(void) interrupt 0
 480          {
 481   1      }
 482          void ISR_Ep1pingnak(void) interrupt 0
 483          {
 484   1      }
 485          void ISR_Ep2pingnak(void) interrupt 0
 486          {
 487   1      }
C51 COMPILER V7.07   VIRTUAL                                                               02/17/2013 16:57:05 PAGE 9   

 488          void ISR_Ep4pingnak(void) interrupt 0
 489          {
 490   1      }
 491          void ISR_Ep6pingnak(void) interrupt 0
 492          {
 493   1      }
 494          void ISR_Ep8pingnak(void) interrupt 0
 495          {
 496   1      }
 497          void ISR_Errorlimit(void) interrupt 0
 498          {
 499   1      }
 500          void ISR_Ep2piderror(void) interrupt 0
 501          {
 502   1      }
 503          void ISR_Ep4piderror(void) interrupt 0
 504          {
 505   1      }
 506          void ISR_Ep6piderror(void) interrupt 0
 507          {
 508   1      }
 509          void ISR_Ep8piderror(void) interrupt 0
 510          {
 511   1      }
 512          void ISR_Ep2pflag(void) interrupt 0
 513          {
 514   1      }
 515          void ISR_Ep4pflag(void) interrupt 0
 516          {
 517   1      }
 518          void ISR_Ep6pflag(void) interrupt 0
 519          {
 520   1      }
 521          void ISR_Ep8pflag(void) interrupt 0
 522          {
 523   1      }
 524          void ISR_Ep2eflag(void) interrupt 0
 525          {
 526   1      }
 527          void ISR_Ep4eflag(void) interrupt 0
 528          {
 529   1      }
 530          void ISR_Ep6eflag(void) interrupt 0
 531          {
 532   1      }
 533          void ISR_Ep8eflag(void) interrupt 0
 534          {
 535   1      }
 536          void ISR_Ep2fflag(void) interrupt 0
 537          {
 538   1      }
 539          void ISR_Ep4fflag(void) interrupt 0
 540          {
 541   1      }
 542          void ISR_Ep6fflag(void) interrupt 0
 543          {
 544   1      }
 545          void ISR_Ep8fflag(void) interrupt 0
 546          {
 547   1      }
 548          void ISR_GpifComplete(void) interrupt 0
 549          {
C51 COMPILER V7.07   VIRTUAL                                                               02/17/2013 16:57:05 PAGE 10  

 550   1      }
 551          void ISR_GpifWaveform(void) interrupt 0
 552          {
 553   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    551    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
