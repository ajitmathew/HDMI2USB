C51 COMPILER V7.07   FW                                                                    01/28/2013 04:31:49 PAGE 1   


C51 COMPILER V7.07, COMPILATION OF MODULE FW
OBJECT MODULE PLACED IN .\output\fw.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE fw.c BROWSE INCDIR(C:\Cypress\USB\CY3684_EZ-USB_FX2LP_DVK\1.0\Target\Inc;C:
                    -\Cypress\USB\CY3684_EZ-USB_FX2LP_DVK\1.0\uV2_4k\C51\INC) DEBUG OBJECTEXTEND PRINT(.\output\fw.lst) OBJECT(.\output\fw.ob
                    -j)

stmt level    source

   1          //-----------------------------------------------------------------------------
   2          //   File:      fw.c
   3          //   Contents:  Firmware frameworks task dispatcher and device request parser
   4          //
   5          // $Archive: /USB/Examples/FX2LP/bulkext/fw.c $
   6          // $Date: 3/23/05 2:53p $
   7          // $Revision: 8 $
   8          //
   9          //
  10          //-----------------------------------------------------------------------------
  11          // Copyright 2003, Cypress Semiconductor Corporation
  12          //-----------------------------------------------------------------------------
  13          #include "fx2.h"
  14          #include "fx2regs.h"
  15          //#include "syncdly.h"            // SYNCDELAY macro
  16          
  17          //-----------------------------------------------------------------------------
  18          // Constants
  19          //-----------------------------------------------------------------------------
  20          #define DELAY_COUNT   0x9248*8L  // Delay for 8 sec at 24Mhz, 4 sec at 48
  21          #define _IFREQ  24000            // IFCLK constant for Synchronization Delay
  22          #define _CFREQ  24000            // CLKOUT constant for Synchronization Delay
  23          //#define       _SCYCL  1
  24          
  25          
  26          //-----------------------------------------------------------------------------
  27          // Random Macros
  28          //-----------------------------------------------------------------------------
  29          #define   min(a,b) (((a)<(b))?(a):(b))
  30          #define   max(a,b) (((a)>(b))?(a):(b))
  31          
  32          #include "fx2sdly.h"
  33          //----------------------------------------------------------------------------
  34          //      UVC definations
  35          //----------------------------------------------------------------------------
  36          #define         UVC_SET_INTERFACE               0x21    // SET_Interface : UVC
  37          #define         UVC_GET_INTERFACE               0xA1    // GET_Interface : UVC
  38          
  39          #define         UVC_SET_ENDPOINT                0x22    // SET_ENDPOINT : UVC
  40          #define         UVC_GET_ENDPOINT                0xA2    // GET_ENDPOINT : UVC
  41          
  42          
  43          #define RC_UNDEFINED    0x00
  44          #define SET_CUR                 0x01
  45          #define SET_CUR_ALL     0x11
  46          #define GET_CUR                 0x81 // 1
  47          #define GET_MIN                 0x82 //
  48          #define GET_MAX                 0x83 // 2
  49          #define GET_RES                 0x84
  50          #define GET_LEN                 0x85
  51          #define GET_INFO                0x86
  52          #define GET_DEF                 0x87
  53          #define GET_CUR_ALL     0x91
C51 COMPILER V7.07   FW                                                                    01/28/2013 04:31:49 PAGE 2   

  54          #define GET_MIN_ALL     0x92
  55          #define GET_MAX_ALL     0x93
  56          #define GET_RES_ALL     0x94
  57          #define GET_DEF_ALL     0x97
  58          
  59          
  60          //-----------------------------------------------------------------------------
  61          // Global Variables
  62          //-----------------------------------------------------------------------------
  63          volatile  BOOL   GotSUD;
  64          BOOL      Rwuen;
  65          BOOL      Selfpwr;
  66          volatile BOOL   Sleep;                  // Sleep mode enable flag
  67          
  68          WORD   pDeviceDscr;   // Pointer to Device Descriptor; Descriptors may be moved
  69          WORD   pDeviceQualDscr;
  70          WORD   pHighSpeedConfigDscr;
  71          WORD   pFullSpeedConfigDscr;   
  72          WORD   pConfigDscr;
  73          WORD   pOtherConfigDscr;   
  74          WORD   pStringDscr;   
  75          WORD   pUserDscr;   
  76          WORD   pVSUserDscr;   
  77          
  78          BYTE valuesArray[26]=    
  79          {
  80                  0x00,0x00,                       /* bmHint : No fixed parameters */
  81              0x01,                            /* Use 1st Video format index */
  82              0x01,                            /* Use 1st Video frame index */
  83              0x2A,0x2C,0x0A,0x00,             /* Desired frame interval in 100ns */
  84              0x00,0x00,                       /* Key frame rate in key frame/video frame units */
  85              0x00,0x00,                       /* PFrame rate in PFrame / key frame units */
  86              0x00,0x00,                       /* Compression quality control */
  87              0x00,0x00,                       /* Window size for average bit rate */
  88              0x00,0x00,                       /* Internal video streaming i/f latency in ms */
  89              0x00,0x90,0x01,0x00,             /* Max video frame size in bytes (100KB) */
  90              //0x00,0x04,0x00,0x00              /* No. of bytes device can rx in single payload */
  91              0x00,0x00,0xBA,0x6F              /* No. of bytes device can rx in single payload */
  92          };
  93          //-----------------------------------------------------------------------------
  94          // Prototypes
  95          //-----------------------------------------------------------------------------
  96          void SetupCommand(void);
  97          //void TD_Init(void);
  98          //void TD_Poll(void);
  99          BOOL TD_Suspend(void);
 100          BOOL TD_Resume(void);
 101          
 102          BOOL DR_GetDescriptor(void);
 103          BOOL DR_SetConfiguration(void);
 104          BOOL DR_GetConfiguration(void);
 105          BOOL DR_SetInterface(void);
 106          BOOL DR_GetInterface(void);
 107          BOOL DR_GetStatus(void);
 108          BOOL DR_ClearFeature(void);
 109          BOOL DR_SetFeature(void);
 110          BOOL DR_VendorCmnd(void);
 111          
 112          // this table is used by the epcs macro 
 113          const char code  EPCS_Offset_Lookup_Table[] =
 114          {
 115             0,    // EP1OUT
C51 COMPILER V7.07   FW                                                                    01/28/2013 04:31:49 PAGE 3   

 116             1,    // EP1IN
 117             2,    // EP2OUT
 118             2,    // EP2IN
 119             3,    // EP4OUT
 120             3,    // EP4IN
 121             4,    // EP6OUT
 122             4,    // EP6IN
 123             5,    // EP8OUT
 124             5,    // EP8IN
 125          };
 126          
 127          // macro for generating the address of an endpoint's control and status register (EPnCS)
 128          #define epcs(EP) (EPCS_Offset_Lookup_Table[(EP & 0x7E) | (EP > 128)] + 0xE6A1)
 129          
 130          //-----------------------------------------------------------------------------
 131          // Code
 132          //-----------------------------------------------------------------------------
 133          // unsigned char code LEDSegTabel[] = 
 134          // {
 135              // 0x44, 0xf5, 0x1c, 0x94, 0xa5,
 136                  // 0x86, 0x06, 0xf4, 0x04, 0x84, 
 137                  // 0x24, 0x07, 0x4e, 0x15, 0x0e, 0x2e};
 138          #define SHRCLK 4
 139          #define LATCLK 5
 140          #define SDI    6
 141          // void CY_IOInit(void)
 142          // {
 143              // OEA = 0x0f;
 144                  // IOA = 0x0f;
 145          // }
 146          
 147          void DelayMs(void)
 148          {
 149   1         unsigned long t = 40000;
 150   1         while(t--);
 151   1      }
 152          /*
 153          void DispLeds(unsigned short value)
 154          {
 155              unsigned char Bitcnt = 16;
 156                  
 157                  IOE &= ~(1 << LATCLK);
 158                  for (Bitcnt = 0; Bitcnt < 16; Bitcnt++)
 159                  {
 160                      IOE &= ~(1 << SHRCLK);
 161                          (value&0x8000)?(IOE |= (1 << SDI)):(IOE &= ~(1 << SDI));
 162                          IOE |= (1 << SHRCLK);
 163                          value <<= 1;
 164                  }
 165                  IOE |= (1 << LATCLK);
 166          }
 167          */
 168          unsigned short xdata ExtMem[0x4000] _at_ 0x4000;
 169          void ExtMemTest(void)
 170          {
 171   1              unsigned short counter = 0;
 172   1      
 173   1          for (;counter < 0x4000; counter++)
 174   1              {
 175   2                  ExtMem[counter] = counter;
 176   2              }
 177   1              counter = 0;
C51 COMPILER V7.07   FW                                                                    01/28/2013 04:31:49 PAGE 4   

 178   1              for (;counter < 0x4000; counter++)
 179   1              {
 180   2                      if (counter != ExtMem[counter])
 181   2                      {
 182   3                          while(1)
 183   3                              {
 184   4                                      IOB ^= 0XFF;
 185   4                                      DelayMs();
 186   4                              }
 187   3                      }
 188   2              }
 189   1      }
 190          //[YourCompany]%DeviceDesc%=CyLoad, USB\VID_04B4&PID_0084
 191          // Task dispatcher
 192          void main(void)
 193          {
 194   1      //   DWORD   i;
 195   1      //   WORD   offset;
 196   1      //   DWORD   DevDescrLen;
 197   1         DWORD   j=0;
 198   1      //   WORD   IntDescrAddr;
 199   1      //   WORD   ExtDescrAddr;
 200   1      
 201   1      
 202   1         // Initialize Global States
 203   1         Sleep = FALSE;               // Disable sleep mode
 204   1         Rwuen = FALSE;               // Disable remote wakeup
 205   1         Selfpwr = FALSE;            // Disable self powered
 206   1         GotSUD = FALSE;               // Clear "Got setup data" flag
 207   1      
 208   1         
 209   1      
 210   1         //==========================================================
 211   1        // CPUCS = 0x10; // CLKSPD[1:0]=10, for 48MHz operation, output CLKOUT
 212   1        SYNCDELAY;
 213   1       FIFOPINPOLAR = 0x00;
 214   1      SYNCDELAY;
 215   1        // PINFLAGSAB = 0x08;                 // FLAGA - EP6FF
 216   1        PINFLAGSAB = 0x00;                    // FLAGA - EP6FF
 217   1        SYNCDELAY;
 218   1        // PINFLAGSCD = 0xE0;                 // FLAGD - EP2EF
 219   1        PINFLAGSCD = 0x00;                    // FLAGD - EP2EF
 220   1        SYNCDELAY;
 221   1        PORTACFG |= 0x80;
 222   1        SYNCDELAY;
 223   1        IFCONFIG = 0xE3; // for async? for sync?
 224   1      SYNCDELAY;
 225   1        // IFCLKSRC=1   , FIFOs executes on internal clk source 
 226   1        // xMHz=1       , 48MHz operation
 227   1        // IFCLKOE=1    ,Drive IFCLK pin signal at 48MHz
 228   1        // IFCLKPOL=0   , Don't invert IFCLK pin signal from internal clk
 229   1        // ASYNC=0      , master samples synchronous
 230   1        // GSTATE=0     , Don't drive GPIF states out on PORTE[2:0], debug WF
 231   1        // IFCFG[1:0]=11, FX2 in slave FIFO mode
 232   1      
 233   1      
 234   1        // Registers which require a synchronization delay, see section 15.14
 235   1        // FIFORESET        FIFOPINPOLAR
 236   1        // INPKTEND         OUTPKTEND
 237   1        // EPxBCH:L         REVCTL
 238   1        // GPIFTCB3         GPIFTCB2
 239   1        // GPIFTCB1         GPIFTCB0
C51 COMPILER V7.07   FW                                                                    01/28/2013 04:31:49 PAGE 5   

 240   1        // EPxFIFOPFH:L     EPxAUTOINLENH:L
 241   1        // EPxFIFOCFG       EPxGPIFFLGSEL
 242   1        // PINFLAGSxx       EPxFIFOIRQ
 243   1        // EPxFIFOIE        GPIFIRQ
 244   1        // GPIFIE           GPIFADRH:L
 245   1        // UDMACRCH:L       EPxGPIFTRIG
 246   1        // GPIFTRIG
 247   1        
 248   1        // Note: The pre-REVE EPxGPIFTCH/L register are affected, as well...
 249   1        //      ...these have been replaced by GPIFTC[B3:B0] registers
 250   1      
 251   1      
 252   1        
 253   1       
 254   1      
 255   1        // EP4 and EP8 are not used in this implementation...
 256   1                         
 257   1        EP2CFG = 0xA2;                //out 512 bytes, 2x, bulk
 258   1        SYNCDELAY;                    
 259   1      //  EP6CFG = 0xE2;                // in 512 bytes, 2x, bulk
 260   1        EP6CFG = 0xD2;                // in 512 bytes, 2x, iso 1101  
 261   1      SYNCDELAY;              
 262   1        EP4CFG = 0xE2;                // in 512 bytes, 2x, bulk
 263   1        SYNCDELAY;                     
 264   1        EP8CFG = 0x02;                //clear valid bit
 265   1        SYNCDELAY;   
 266   1      
 267   1        SYNCDELAY;
 268   1        FIFORESET = 0x80;             // activate NAK-ALL to avoid race conditions
 269   1        SYNCDELAY;                    // see TRM section 15.14
 270   1        FIFORESET = 0x02;             // reset, FIFO 2
 271   1        SYNCDELAY;                    // 
 272   1        FIFORESET = 0x04;             // reset, FIFO 4
 273   1        SYNCDELAY;                    // 
 274   1        FIFORESET = 0x06;             // reset, FIFO 6
 275   1        SYNCDELAY;                    // 
 276   1        FIFORESET = 0x08;             // reset, FIFO 8
 277   1        SYNCDELAY;                    // 
 278   1        FIFORESET = 0x00;             // deactivate NAK-ALL
 279   1      
 280   1      
 281   1        // handle the case where we were already in AUTO mode...
 282   1        // ...for example: back to back firmware downloads...
 283   1        SYNCDELAY;                    // 
 284   1        EP2FIFOCFG = 0x00;            // AUTOOUT=0, WORDWIDE=1
 285   1        
 286   1        // core needs to see AUTOOUT=0 to AUTOOUT=1 switch to arm endp's
 287   1        
 288   1        SYNCDELAY;                    // 
 289   1        EP2FIFOCFG = 0x10;            // AUTOOUT=1, WORDWIDE=1
 290   1        
 291   1        SYNCDELAY;                    // 
 292   1        EP4FIFOCFG = 0x0C;            // AUTOIN=1, ZEROLENIN=1, WORDWIDE=1
 293   1          SYNCDELAY;  
 294   1        EP6FIFOCFG = 0x4C;            //INFM1=1 AUTOIN=1, ZEROLENIN=1, WORDWIDE=1
 295   1      // EP6FIFOCFG = 0x0C;            // AUTOIN=1, ZEROLENIN=1, WORDWIDE=1
 296   1      
 297   1        SYNCDELAY;
 298   1      
 299   1      
 300   1        
 301   1              EP2AUTOINLENH = 0x02; // EZ-USB automatically commits data in 512-byte chunks
C51 COMPILER V7.07   FW                                                                    01/28/2013 04:31:49 PAGE 6   

 302   1              SYNCDELAY;
 303   1              EP2AUTOINLENL = 0x00;
 304   1              SYNCDELAY;
 305   1              
 306   1              EP4AUTOINLENH = 0x02; // EZ-USB automatically commits data in 512-byte chunks
 307   1              SYNCDELAY;
 308   1              EP4AUTOINLENL = 0x00;
 309   1              SYNCDELAY;
 310   1              
 311   1              EP6AUTOINLENH = 0x02; // EZ-USB automatically commits data in 512-byte chunks
 312   1              SYNCDELAY;
 313   1              EP6AUTOINLENL = 0x00;
 314   1              SYNCDELAY;
 315   1              
 316   1              //==============================================================================
 317   1              // PORTACFG = 0x00; // 
 318   1              // SYNCDELAY;
 319   1      
 320   1              // OEA = 0xFF;
 321   1              // IOA = 0x00; 
 322   1              
 323   1              
 324   1              OED = 0xFF;
 325   1              IOD = 0xFF; 
 326   1         //==========================================================
 327   1      
 328   1         
 329   1         // Initialize user device
 330   1         // TD_Init();
 331   1              // CY_IOInit();
 332   1         // The following section of code is used to relocate the descriptor table. 
 333   1         // The frameworks uses SUDPTRH and SUDPTRL to automate the SETUP requests
 334   1         // for descriptors.  These registers only work with memory locations
 335   1         // in the EZ-USB internal RAM.  Therefore, if the descriptors are located
 336   1         // in external RAM, they must be copied to in internal RAM.  
 337   1         // The descriptor table is relocated by the frameworks ONLY if it is found 
 338   1         // to be located in external memory.
 339   1         pDeviceDscr = (WORD)&DeviceDscr;
 340   1         pDeviceQualDscr = (WORD)&DeviceQualDscr;
 341   1         pHighSpeedConfigDscr = (WORD)&HighSpeedConfigDscr;
 342   1         pFullSpeedConfigDscr = (WORD)&FullSpeedConfigDscr;
 343   1         pStringDscr = (WORD)&StringDscr;
 344   1         pUserDscr = (WORD)&UserDscr;
 345   1         //pVSUserDscr = (WORD) & VSUserDscr;
 346   1      
 347   1      
 348   1      
 349   1         // Is the descriptor table in external RAM (> 16Kbytes)?  If yes,
 350   1         // then relocate.
 351   1         // Note that this code only checks if the descriptors START in 
 352   1         // external RAM.  It will not work if the descriptor table spans
 353   1         // internal and external RAM.
 354   1      /*   if ((WORD)&DeviceDscr & 0xC000)
 355   1         {
 356   1            // first, relocate the descriptors
 357   1            IntDescrAddr = INTERNAL_DSCR_ADDR;
 358   1            ExtDescrAddr = (WORD)&DeviceDscr;
 359   1            DevDescrLen = (WORD)&UserDscr - (WORD)&DeviceDscr + 2;
 360   1            for (i = 0; i < DevDescrLen; i++)
 361   1               *((BYTE xdata *)IntDescrAddr+i) = *((BYTE xdata *)ExtDescrAddr+i);
 362   1      
 363   1            // update all of the descriptor pointers
C51 COMPILER V7.07   FW                                                                    01/28/2013 04:31:49 PAGE 7   

 364   1            pDeviceDscr = IntDescrAddr;
 365   1            offset = (WORD)&DeviceDscr - INTERNAL_DSCR_ADDR;
 366   1            pDeviceQualDscr -= offset;
 367   1            pConfigDscr -= offset;
 368   1            pOtherConfigDscr -= offset;
 369   1            pHighSpeedConfigDscr -= offset;
 370   1            pFullSpeedConfigDscr -= offset;
 371   1            pStringDscr -= offset;
 372   1         }
 373   1      */
 374   1         EZUSB_IRQ_ENABLE();            // Enable USB interrupt (INT2)
 375   1         EZUSB_ENABLE_RSMIRQ();            // Wake-up interrupt
 376   1      
 377   1         INTSETUP |= (bmAV2EN | bmAV4EN);     // Enable INT 2 & 4 autovectoring
 378   1      
 379   1         USBIE |= bmSUDAV | bmSUTOK | bmSUSP | bmURES | bmHSGRANT;   // Enable selected interrupts
 380   1         EA = 1;                  // Enable 8051 interrupts
 381   1      #ifndef NO_RENUM
 382   1         // Renumerate if necessary.  Do this by checking the renum bit.  If it
 383   1         // is already set, there is no need to renumerate.  The renum bit will
 384   1         // already be set if this firmware was loaded from an eeprom.
 385   1         if(!(USBCS & bmRENUM))
 386   1         {
 387   2             EZUSB_Discon(TRUE);   // renumerate
 388   2         }
 389   1      #endif
 390   1      
 391   1         // unconditionally re-connect.  If we loaded from eeprom we are
 392   1         // disconnected and need to connect.  If we just renumerated this
 393   1         // is not necessary but doesn't hurt anything
 394   1         USBCS &=~bmDISCON;
 395   1      
 396   1         CKCON = (CKCON&(~bmSTRETCH)) | FW_STRETCH_VALUE; // Set stretch
 397   1      
 398   1         // clear the Sleep flag.
 399   1         Sleep = FALSE;
 400   1         GotSUD = FALSE;          // Clear SETUP flag
 401   1      
 402   1         // Task Dispatcher
 403   1         while(TRUE)               // Main Loop
 404   1         {
 405   2            // Poll User Device
 406   2            //TD_Poll();
 407   2            // Check for pending SETUP
 408   2            if(GotSUD)
 409   2            {
 410   3               SetupCommand();          // Implement setup command
 411   3               GotSUD = FALSE;          // Clear SETUP flag
 412   3            }
 413   2      
 414   2            // check for and handle suspend.
 415   2            // NOTE: Idle mode stops the processor clock.  There are only two
 416   2            // ways out of idle mode, the WAKEUP pin, and detection of the USB
 417   2            // resume state on the USB bus.  The timers will stop and the
 418   2            // processor will not wake up on any other interrupts.
 419   2            if (Sleep)
 420   2            {
 421   3               if(TD_Suspend())
 422   3               { 
 423   4                  Sleep = FALSE;     // Clear the "go to sleep" flag.  Do it here to prevent any race condition 
             -between wakeup and the next sleep.
 424   4                  do
C51 COMPILER V7.07   FW                                                                    01/28/2013 04:31:49 PAGE 8   

 425   4                  {
 426   5                     EZUSB_Susp();         // Place processor in idle mode.
 427   5                  }
 428   4                  while(!Rwuen && EZUSB_EXTWAKEUP());
 429   4                  // above.  Must continue to go back into suspend if the host has disabled remote wakeup
 430   4                  // *and* the wakeup was caused by the external wakeup pin.
 431   4      
 432   4                  // 8051 activity will resume here due to USB bus or Wakeup# pin activity.
 433   4                  EZUSB_Resume();   // If source is the Wakeup# pin, signal the host to Resume.      
 434   4                  TD_Resume();
 435   4               }   
 436   3            }
 437   2      
 438   2         }
 439   1      }
 440          
 441          BOOL HighSpeedCapable()
 442          {
 443   1         // this function determines if the chip is high-speed capable.
 444   1         // FX2 and FX2LP are high-speed capable. FX1 is not - it does
 445   1         // not have a high-speed transceiver.
 446   1      
 447   1         if (GPCR2 & bmFULLSPEEDONLY)
 448   1            return FALSE;
 449   1         else
 450   1            return TRUE;
 451   1      }   
 452          
 453          // Device request parser
 454          void SetupCommand(void)
 455          {
 456   1         void   *dscr_ptr;
 457   1         BYTE    i,length;
 458   1      
 459   1         if ((SETUPDAT[0]==UVC_SET_INTERFACE)|(SETUPDAT[0]==UVC_GET_INTERFACE)|(SETUPDAT[0]==UVC_SET_ENDPOINT)|(
             -SETUPDAT[0]==UVC_GET_ENDPOINT))
 460   1         {
 461   2         length = 26;//SETUPDAT[7];
 462   2              if ((SETUPDAT[1]==GET_CUR)|(SETUPDAT[1]==GET_MIN)|(SETUPDAT[1]==GET_MAX))
 463   2              {       
 464   3                      for (i=0;i<length-1;i++)
 465   3                      EP0BUF[i] = valuesArray[i];
 466   3                      EP0BCH = 0;
 467   3                      EP0BCL = length;//SETUPDAT[7];  
 468   3                      
 469   3      
 470   3              }
 471   2              else 
 472   2              {
 473   3                      // for (i=0;i<length;i++)
 474   3                      // valuesArray[i]=EP0BUF[i];
 475   3                              
 476   3                      EP0BCH = 0; // ACK
 477   3              EP0BCL = 0; // ACK 
 478   3              
 479   3      
 480   3              }
 481   2      
 482   2                      // IOA = 0xFF; 
 483   2         
 484   2         }
 485   1         else
C51 COMPILER V7.07   FW                                                                    01/28/2013 04:31:49 PAGE 9   

 486   1         switch(SETUPDAT[1])
 487   1         {
 488   2                
 489   2            case SC_GET_DESCRIPTOR:                  // *** Get Descriptor
 490   2               if(DR_GetDescriptor())
 491   2                  switch(SETUPDAT[3])         
 492   2                  {
 493   3                     case GD_DEVICE:            // Device
 494   3                                 IOA = 0x00;
 495   3                        SUDPTRH = MSB(pDeviceDscr);
 496   3                        SUDPTRL = LSB(pDeviceDscr);
 497   3                        break;
 498   3                     case GD_DEVICE_QUALIFIER:            // Device Qualifier
 499   3                                        // only retuen a device qualifier if this is a high speed
 500   3                                        // capable chip.
 501   3                                        if (HighSpeedCapable())
 502   3                                        {
 503   4                                SUDPTRH = MSB(pDeviceQualDscr);
 504   4                                SUDPTRL = LSB(pDeviceQualDscr);
 505   4                                        }
 506   3                                        else
 507   3                                        {
 508   4                                                EZUSB_STALL_EP0();
 509   4                                        }
 510   3                                        break;
 511   3                     case GD_CONFIGURATION:         // Configuration
 512   3                        SUDPTRH = MSB(pConfigDscr);
 513   3                        SUDPTRL = LSB(pConfigDscr);
 514   3                        break;
 515   3                     case GD_OTHER_SPEED_CONFIGURATION:  // Other Speed Configuration
 516   3                        SUDPTRH = MSB(pOtherConfigDscr);
 517   3                        SUDPTRL = LSB(pOtherConfigDscr);
 518   3                        break;
 519   3                     case GD_STRING:            // String
 520   3                        if(dscr_ptr = (void *)EZUSB_GetStringDscr(SETUPDAT[2]))
 521   3                        {
 522   4                           SUDPTRH = MSB(dscr_ptr);
 523   4                           SUDPTRL = LSB(dscr_ptr);
 524   4                        }
 525   3                        else 
 526   3                           EZUSB_STALL_EP0();   // Stall End Point 0
 527   3                        break;
 528   3                     default:            // Invalid request
 529   3                        EZUSB_STALL_EP0();      // Stall End Point 0
 530   3                  }
 531   2               break;
 532   2            case SC_GET_INTERFACE:                  // *** Get Interface
 533   2               DR_GetInterface();
 534   2               break;
 535   2            case SC_SET_INTERFACE:                  // *** Set Interface
 536   2               DR_SetInterface();
 537   2               break;
 538   2            case SC_SET_CONFIGURATION:               // *** Set Configuration
 539   2               DR_SetConfiguration();
 540   2               break;
 541   2            case SC_GET_CONFIGURATION:               // *** Get Configuration
 542   2               DR_GetConfiguration();
 543   2               break;
 544   2            case SC_GET_STATUS:                  // *** Get Status
 545   2               if(DR_GetStatus())
 546   2                  switch(SETUPDAT[0])
 547   2                  {
C51 COMPILER V7.07   FW                                                                    01/28/2013 04:31:49 PAGE 10  

 548   3                     case GS_DEVICE:            // Device
 549   3                        EP0BUF[0] = ((BYTE)Rwuen << 1) | (BYTE)Selfpwr;
 550   3                        EP0BUF[1] = 0;
 551   3                        EP0BCH = 0;
 552   3                        EP0BCL = 2;
 553   3                        break;
 554   3                     case GS_INTERFACE:         // Interface
 555   3                        EP0BUF[0] = 0;
 556   3                        EP0BUF[1] = 0;
 557   3                        EP0BCH = 0;
 558   3                        EP0BCL = 2;
 559   3                        break;
 560   3                     case GS_ENDPOINT:         // End Point
 561   3                        EP0BUF[0] = *(BYTE xdata *) epcs(SETUPDAT[4]) & bmEPSTALL;
 562   3                        EP0BUF[1] = 0;
 563   3                        EP0BCH = 0;
 564   3                        EP0BCL = 2;
 565   3                        break;
 566   3                     default:            // Invalid Command
 567   3                        EZUSB_STALL_EP0();      // Stall End Point 0
 568   3                  }
 569   2               break;
 570   2            case SC_CLEAR_FEATURE:                  // *** Clear Feature
 571   2               if(DR_ClearFeature())
 572   2                  switch(SETUPDAT[0])
 573   2                  {
 574   3                     case FT_DEVICE:            // Device
 575   3                        if(SETUPDAT[2] == 1)
 576   3                           Rwuen = FALSE;       // Disable Remote Wakeup
 577   3                        else
 578   3                           EZUSB_STALL_EP0();   // Stall End Point 0
 579   3                        break;
 580   3                     case FT_ENDPOINT:         // End Point
 581   3                        if(SETUPDAT[2] == 0)
 582   3                        {
 583   4                           *(BYTE xdata *) epcs(SETUPDAT[4]) &= ~bmEPSTALL;
 584   4                           EZUSB_RESET_DATA_TOGGLE( SETUPDAT[4] );
 585   4                        }
 586   3                        else
 587   3                           EZUSB_STALL_EP0();   // Stall End Point 0
 588   3                        break;
 589   3                  }
 590   2               break;
 591   2            case SC_SET_FEATURE:                  // *** Set Feature
 592   2               if(DR_SetFeature())
 593   2                  switch(SETUPDAT[0])
 594   2                  {
 595   3                     case FT_DEVICE:            // Device
 596   3                        if(SETUPDAT[2] == 1)
 597   3                           Rwuen = TRUE;      // Enable Remote Wakeup
 598   3                        else if(SETUPDAT[2] == 2)
 599   3                           // Set Feature Test Mode.  The core handles this request.  However, it is
 600   3                           // necessary for the firmware to complete the handshake phase of the
 601   3                           // control transfer before the chip will enter test mode.  It is also
 602   3                           // necessary for FX2 to be physically disconnected (D+ and D-)
 603   3                           // from the host before it will enter test mode.
 604   3                           break;
 605   3                        else
 606   3                           EZUSB_STALL_EP0();   // Stall End Point 0
 607   3                        break;
 608   3                     case FT_ENDPOINT:         // End Point
 609   3                        *(BYTE xdata *) epcs(SETUPDAT[4]) |= bmEPSTALL;
C51 COMPILER V7.07   FW                                                                    01/28/2013 04:31:49 PAGE 11  

 610   3                        break;
 611   3                     default:
 612   3                        EZUSB_STALL_EP0();      // Stall End Point 0
 613   3                  }
 614   2               break;
 615   2            default:                     // *** Invalid Command
 616   2               if(DR_VendorCmnd())
 617   2                  EZUSB_STALL_EP0();            // Stall End Point 0
 618   2         }
 619   1      
 620   1         // Acknowledge handshake phase of device request
 621   1         EP0CS |= bmHSNAK;
 622   1      }
 623          
 624          // Wake-up interrupt handler
 625          void resume_isr(void) interrupt WKUP_VECT
 626          {
 627   1         EZUSB_CLEAR_RSMIRQ();
 628   1      }
 629          
 630          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1229    ----
   CONSTANT SIZE    =     10    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     44       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
