C51 COMPILER V7.07   PERIPH                                                                03/10/2013 15:25:40 PAGE 1   


C51 COMPILER V7.07, COMPILATION OF MODULE PERIPH
OBJECT MODULE PLACED IN .\output\periph.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE periph.c BROWSE INCDIR(C:\Cypress\USB\CY3684_EZ-USB_FX2LP_DVK\1.0\Target\In
                    -c;C:\Cypress\USB\CY3684_EZ-USB_FX2LP_DVK\1.0\uV2_4k\C51\INC) DEBUG OBJECTEXTEND PRINT(.\output\periph.lst) OBJECT(.\outp
                    -ut\periph.obj)

stmt level    source

   1          //-----------------------------------------------------------------------------
   2          //   File:      periph.c
   3          //   Contents:  Hooks required to implement USB peripheral function.
   4          //
   5          // $Archive: /USB/Examples/FX2LP/hid_kb/periph.c $
   6          // $Date: 3/23/05 2:58p $
   7          // $Revision: 2 $
   8          //
   9          //
  10          //-----------------------------------------------------------------------------
  11          // Copyright 2003, Cypress Semiconductor Corporation
  12          //
  13          // This software is owned by Cypress Semiconductor Corporation (Cypress) and is
  14          // protected by United States copyright laws and international treaty provisions. Cypress
  15          // hereby grants to Licensee a personal, non-exclusive, non-transferable license to copy,
  16          // use, modify, create derivative works of, and compile the Cypress Source Code and
  17          // derivative works for the sole purpose of creating custom software in support of Licensee
  18          // product ("Licensee Product") to be used only in conjunction with a Cypress integrated
  19          // circuit. Any reproduction, modification, translation, compilation, or representation of this
  20          // software except as specified above is prohibited without the express written permission of
  21          // Cypress.
  22          //
  23          // Disclaimer: Cypress makes no warranty of any kind, express or implied, with regard to
  24          // this material, including, but not limited to, the implied warranties of merchantability and
  25          // fitness for a particular purpose. Cypress reserves the right to make changes without
  26          // further notice to the materials described herein. Cypress does not assume any liability
  27          // arising out of the application or use of any product or circuit described herein. Cypress’
  28          // products described herein are not authorized for use as components in life-support
  29          // devices.
  30          //
  31          // This software is protected by and subject to worldwide patent coverage, including U.S.
  32          // and foreign patents. Use may be limited by and subject to the Cypress Software License
  33          // Agreement.
  34          //-----------------------------------------------------------------------------
  35          #pragma NOIV               // Do not generate interrupt vectors
  36          
  37          #include "fx2.h"
  38          #include "fx2regs.h"
  39          #include "fx2sdly.h"
  40          
  41          extern BOOL   GotSUD;         // Received setup data flag
  42          extern BOOL   Sleep;
  43          extern BOOL   Rwuen;
  44          extern BOOL   Selfpwr;
  45          
  46          
  47          WORD pCDCDataDscr;
  48          
  49          extern code CDCDataDscr;
  50          
  51          
  52          BYTE   Configuration;      // Current configuration
  53          BYTE   AlternateSetting;   // Alternate settings
C51 COMPILER V7.07   PERIPH                                                                03/10/2013 15:25:40 PAGE 2   

  54          
  55          
  56          
  57          //-----------------------------------------------------------------------------
  58          // Task Dispatcher hooks
  59          //   The following hooks are called by the task dispatcher.
  60          //-----------------------------------------------------------------------------
  61          
  62          
  63          BOOL TD_Suspend(void)          // Called before the device goes into suspend mode
  64          {
  65   1         return(TRUE);
  66   1      }
  67          
  68          BOOL TD_Resume(void)          // Called after the device resumes
  69          {
  70   1         return(TRUE);
  71   1      }
  72          
  73          //-----------------------------------------------------------------------------
  74          // Device Request hooks
  75          //   The following hooks are called by the end point 0 device request parser.
  76          //-----------------------------------------------------------------------------
  77          
  78          BOOL DR_GetDescriptor(void)
  79          {
  80   1      //      BYTE length,i;
  81   1      
  82   1              pCDCDataDscr = (WORD)&CDCDataDscr;
  83   1      
  84   1              switch (SETUPDAT[3])
  85   1              {
  86   2      /*              case GD_HID:                                    //HID Descriptor
  87   2                              SUDPTRH = MSB(pHIDDscr);
  88   2                              SUDPTRL = LSB(pHIDDscr);
  89   2                              return (FALSE);
  90   2                      case GD_REPORT:                                 //Report Descriptor
  91   2                              length = pReportDscrEnd - pReportDscr;
  92   2      
  93   2               AUTOPTR1H = MSB(pReportDscr);
  94   2               AUTOPTR1L = LSB(pReportDscr);
  95   2      
  96   2               for(i=0;i<length;i++)
  97   2                  EP0BUF[i]=XAUTODAT1;
  98   2      
  99   2               EP0BCL = length;
 100   2               return (FALSE);
 101   2                      default:
 102   2                              return(TRUE);*/
 103   2                              /*
 104   2                              SUDPTRH = MSB(pCDCDataDscr);
 105   2                              SUDPTRL = LSB(pCDCDataDscr);
 106   2                              return (FALSE);*/
 107   2      
 108   2                              return (TRUE);
 109   2      
 110   2              }
 111   1      }
 112          
 113          BOOL DR_SetConfiguration(void)   // Called when a Set Configuration command is received
 114          {
 115   1         Configuration = SETUPDAT[2];
C51 COMPILER V7.07   PERIPH                                                                03/10/2013 15:25:40 PAGE 3   

 116   1         return(TRUE);            // Handled by user code
 117   1      }
 118          
 119          BOOL DR_GetConfiguration(void)   // Called when a Get Configuration command is received
 120          {
 121   1         EP0BUF[0] = Configuration;
 122   1         EP0BCH = 0;
 123   1         EP0BCL = 1;
 124   1         return(TRUE);            // Handled by user code
 125   1      }
 126          
 127          BOOL DR_SetInterface(void)       // Called when a Set Interface command is received
 128          {
 129   1         AlternateSetting = SETUPDAT[2];
 130   1         
 131   1                      SYNCDELAY;
 132   1                      FIFORESET = 0x80;             // activate NAK-ALL to avoid race conditions
 133   1                      SYNCDELAY;                    // see TRM section 15.14
 134   1                      FIFORESET = 0x02;             // reset, FIFO 2
 135   1                      SYNCDELAY;                    // 
 136   1                      FIFORESET = 0x04;             // reset, FIFO 4
 137   1                      SYNCDELAY;                    // 
 138   1                      FIFORESET = 0x06;             // reset, FIFO 6
 139   1                      SYNCDELAY;                    // 
 140   1                      FIFORESET = 0x08;             // reset, FIFO 8
 141   1                      SYNCDELAY;                    // 
 142   1                      FIFORESET = 0x00;             // deactivate NAK-ALL
 143   1                      SYNCDELAY;
 144   1         
 145   1         return(TRUE);            // Handled by user code
 146   1      }
 147          
 148          BOOL DR_GetInterface(void)       // Called when a Set Interface command is received
 149          {
 150   1         EP0BUF[0] = AlternateSetting;
 151   1         EP0BCH = 0;
 152   1         EP0BCL = 1;
 153   1         return(TRUE);            // Handled by user code
 154   1      }
 155          
 156          BOOL DR_GetStatus(void)
 157          {
 158   1         return(TRUE);
 159   1      }
 160          
 161          BOOL DR_ClearFeature(void)
 162          {
 163   1         return(TRUE);
 164   1      }
 165          
 166          BOOL DR_SetFeature(void)
 167          {
 168   1         return(TRUE);
 169   1      }
 170          
 171          BOOL DR_VendorCmnd(void)
 172          {
 173   1         return(TRUE);
 174   1      }
 175          
 176          //-----------------------------------------------------------------------------
 177          // USB Interrupt Handlers
C51 COMPILER V7.07   PERIPH                                                                03/10/2013 15:25:40 PAGE 4   

 178          //   The following functions are called by the USB interrupt jump table.
 179          //-----------------------------------------------------------------------------
 180          
 181          // Setup Data Available Interrupt Handler
 182          void ISR_Sudav(void) interrupt 0
 183          {
 184   1         GotSUD = TRUE;            // Set flag
 185   1         EZUSB_IRQ_CLEAR();
 186   1         USBIRQ = bmSUDAV;         // Clear SUDAV IRQ
 187   1      }
 188          
 189          // Setup Token Interrupt Handler
 190          void ISR_Sutok(void) interrupt 0
 191          {
 192   1         EZUSB_IRQ_CLEAR();
 193   1         USBIRQ = bmSUTOK;         // Clear SUTOK IRQ
 194   1      }
 195          
 196          void ISR_Sof(void) interrupt 0
 197          {
 198   1         EZUSB_IRQ_CLEAR();
 199   1         USBIRQ = bmSOF;            // Clear SOF IRQ
 200   1      }
 201          
 202          void ISR_Ures(void) interrupt 0
 203          {
 204   1         // whenever we get a USB reset, we should revert to full speed mode
 205   1         pConfigDscr = pFullSpeedConfigDscr;
 206   1         ((CONFIGDSCR xdata *) pConfigDscr)->type = CONFIG_DSCR;
 207   1         pOtherConfigDscr = pHighSpeedConfigDscr;
 208   1         ((CONFIGDSCR xdata *) pOtherConfigDscr)->type = OTHERSPEED_DSCR;
 209   1         
 210   1         EZUSB_IRQ_CLEAR();
 211   1         USBIRQ = bmURES;         // Clear URES IRQ
 212   1      }
 213          
 214          void ISR_Susp(void) interrupt 0
 215          {
 216   1         Sleep = TRUE;
 217   1         EZUSB_IRQ_CLEAR();
 218   1         USBIRQ = bmSUSP;
 219   1      }
 220          
 221          void ISR_Highspeed(void) interrupt 0
 222          {
 223   1         if (EZUSB_HIGHSPEED())
 224   1         {
 225   2            pConfigDscr = pHighSpeedConfigDscr;
 226   2            ((CONFIGDSCR xdata *) pConfigDscr)->type = CONFIG_DSCR;
 227   2            pOtherConfigDscr = pFullSpeedConfigDscr;
 228   2            ((CONFIGDSCR xdata *) pOtherConfigDscr)->type = OTHERSPEED_DSCR;
 229   2         }
 230   1      
 231   1         EZUSB_IRQ_CLEAR();
 232   1         USBIRQ = bmHSGRANT;
 233   1      }
 234          void ISR_Ep0ack(void) interrupt 0
 235          {
 236   1      }
 237          void ISR_Stub(void) interrupt 0
 238          {
 239   1      }
C51 COMPILER V7.07   PERIPH                                                                03/10/2013 15:25:40 PAGE 5   

 240          void ISR_Ep0in(void) interrupt 0
 241          {
 242   1      }
 243          void ISR_Ep0out(void) interrupt 0
 244          {
 245   1      }
 246          void ISR_Ep1in(void) interrupt 0
 247          {
 248   1      
 249   1      
 250   1      }
 251          void ISR_Ep1out(void) interrupt 0
 252          {
 253   1      }
 254          void ISR_Ep2inout(void) interrupt 0
 255          {
 256   1      }
 257          void ISR_Ep4inout(void) interrupt 0
 258          {
 259   1      }
 260          void ISR_Ep6inout(void) interrupt 0
 261          {
 262   1      }
 263          void ISR_Ep8inout(void) interrupt 0
 264          {
 265   1      }
 266          void ISR_Ibn(void) interrupt 0
 267          {
 268   1      }
 269          void ISR_Ep0pingnak(void) interrupt 0
 270          {
 271   1      }
 272          void ISR_Ep1pingnak(void) interrupt 0
 273          {
 274   1      }
 275          void ISR_Ep2pingnak(void) interrupt 0
 276          {
 277   1      }
 278          void ISR_Ep4pingnak(void) interrupt 0
 279          {
 280   1      }
 281          void ISR_Ep6pingnak(void) interrupt 0
 282          {
 283   1      }
 284          void ISR_Ep8pingnak(void) interrupt 0
 285          {
 286   1      }
 287          void ISR_Errorlimit(void) interrupt 0
 288          {
 289   1      }
 290          void ISR_Ep2piderror(void) interrupt 0
 291          {
 292   1      }
 293          void ISR_Ep4piderror(void) interrupt 0
 294          {
 295   1      }
 296          void ISR_Ep6piderror(void) interrupt 0
 297          {
 298   1      }
 299          void ISR_Ep8piderror(void) interrupt 0
 300          {
 301   1      }
C51 COMPILER V7.07   PERIPH                                                                03/10/2013 15:25:40 PAGE 6   

 302          void ISR_Ep2pflag(void) interrupt 0
 303          {
 304   1      }
 305          void ISR_Ep4pflag(void) interrupt 0
 306          {
 307   1      }
 308          void ISR_Ep6pflag(void) interrupt 0
 309          {
 310   1      }
 311          void ISR_Ep8pflag(void) interrupt 0
 312          {
 313   1      }
 314          void ISR_Ep2eflag(void) interrupt 0
 315          {
 316   1      }
 317          void ISR_Ep4eflag(void) interrupt 0
 318          {
 319   1      }
 320          void ISR_Ep6eflag(void) interrupt 0
 321          {
 322   1      }
 323          void ISR_Ep8eflag(void) interrupt 0
 324          {
 325   1      }
 326          void ISR_Ep2fflag(void) interrupt 0
 327          {
 328   1      }
 329          void ISR_Ep4fflag(void) interrupt 0
 330          {
 331   1      }
 332          void ISR_Ep6fflag(void) interrupt 0
 333          {
 334   1      }
 335          void ISR_Ep8fflag(void) interrupt 0
 336          {
 337   1      }
 338          void ISR_GpifComplete(void) interrupt 0
 339          {
 340   1      }
 341          void ISR_GpifWaveform(void) interrupt 0
 342          {
 343   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    359    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
